---
title: Coleções$:$ Listas<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Conteúdo desta Aula  

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}
::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center"}
:::

::: {.column width="70%"}
::: {.nonincremental}
::: {style="font-size: 120%;"}
- Coleções:
    - *ArrayList*
:::
:::
:::
::::


## Estruturas de Dados
[O que são estruturas de dados?]{style="color:darkblue;" .fontsize90}

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
xxx
:::
::: {.column width="70%" .fontsize90}
Uma estrutura de dados é uma forma particular de armazenar e organizar os dados que serão utilizados por um programa de modo que eles possam ser manipulados de maneira eficiente.
:::
::::

[O que estudaremos?]{style="color:darkblue;" .fontsize90 .fragment}

:::{.fontsize90 .fragment}
Nesta disciplina veremos como utilizar em nossos programas uma importante estrutura de dados (chamada em Java de coleção).

- Listas.
:::

## Coleções
:::{.fontsize90}
- O pacote `java.util` fornece classes que implementam as coleções. 
- Mas o que é uma coleção?
  - Podemos dizer que é um conjunto de objetos de mesma natureza.
  - Exemplos: coleção de músicas, coleção de carros, coleção de moedas etc.
 
- Em Java, uma coleção é representada por uma classe. Portanto, as operações sobre coleções são realizadas a partir dos métodos implementados nessas classes.
- Quais operações podemos fazer em uma coleção?
  - Adicionar um novo objeto na coleção.
  - Remover um objeto da coleção.
  - Buscar os objetos na coleção.
:::

## Relembrando...
:::{.fontsize90}
Antes de conhecer a classe que implementa a estrutura de dados, vamos recordar de algo que já utilizamos...

- O que já usamos para armazenar conjuntos de dados de mesmo tipo em nossos programas?
  - Já utilizamos os vetores (arrays)!
:::


## Relembrando...
:::{.fontsize70}
Então vamos relembrar algumas coisas importantes sobre vetores:

- Em Java, os vetores são considerados objetos.
- Um vetor pode conter elementos de tipos primitivos (int, float, double etc.) ou de tipos por referência (para objetos).
- Exemplo de declaração de um vetor:
:::

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="10%"}
:::
::: {.column width="90%"}
```{.java code-line-numbers="false"}
int[] c = new int[10];
``` 
:::
::::

:::{.fontsize70}
- Exemplo de modificação dos valores de um vetor de inteiros:
:::

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="10%"}
:::
::: {.column width="90%"}
```{.java code-line-numbers="false"}
for(int i = 0; i < c.length; i++){
  c[i] = i;
}
``` 
:::
::::

:::{.fontsize70}
- Exemplo de vetor passado por parâmetro para método:
:::

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="10%"}
:::
::: {.column width="90%"}
```{.java code-line-numbers="false"}
public void definirVetor(int[] c){
  for(int i = 0; i < c.length; i++){
    c[i] = i;
  }
}
//Obs.: O vetor passado por parâmetro será alterado.
``` 
:::
::::


## Desvantagem dos Vetores
[Apesar da sua utilidade, os vetores têm uma limitação: são estruturas de dados estáticas!]{.fontsize80}

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="20%"}
xxx
:::
::: {.column width="80%" .fontsize80}
E o que isso significa?

- Significa que o seu tamanho, definido no momento de sua declaração, é fixo.
:::
::::

. . .

[Nesse caso, como eu faço se não souber quantos elementos eu terei que armazenar em um determinado vetor?]{.fontsize80 style="color:darkblue;"}

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="80%" .fontsize80}
- Nesse caso a única opção é "estimar" o tamanho necessário do vetor, podendo resultar em duas situações:
  - Desperdiço de memória se você estimar um tamanho maior do que é realmente necessário.
  - Não conseguir armazenar todos os elementos se você estimar um tamanho menor do que realmente é necessário
:::
::: {.column width="20%"}
yyy
:::
::::


## Classe ArrayList
:::{.fontsize80}
A classe `ArrayList` implementa uma lista!

- Nessa lista, a ordem dos seus elementos é a mesma da inserção e o acesso aos mesmos pode ser feito pela sua posição.
- A classe de coleção ArrayList$<$T$>$ fornece uma solução conveniente quando necessita-se de uma estrutura que possa alterar dinamicamente seu tamanho para acomodar mais elementos.
  - O T$^1$ corresponde ao tipo dos elementos que você deseja armazenar no ArrayList.  
:::   

::::{.columns style='display: flex !important; align-items: top;' .fragment }
::: {.column width="20%" .fontsize80 .nonincremental}
- Exemplo:
:::
::: {.column width="80%"}
```{.java code-line-numbers="false"}
ArrayList<String> nomes;
``` 
[Nesse caso estamos declarando a variável nomes, do tipo ArrayList de strings, ou seja, para armazenar elementos do tipo String.]{.fontsize80}
:::
::::   

:::{.fontsize70 .fragment}
__________<br>
1. Classes que dependem de um segundo tipo são chamadas de classes genéricas.
:::



## Classe ArrayList
:::{.fontsize80}
Para instanciar um `ArrayList` podemos fazer da seguinte maneira:
:::

```{.java code-line-numbers="false"}
ArrayList<String> nomes;
nomes = new ArrayList<String>();
```

. . .

[Os principais métodos são:]{.fontsize80}

:::{.fontsize60 }
|    Método   |                                        Descrição                                      |
|:------------|:--------------------------------------------------------------------------------------|
| add(x)      | Adiciona o elemento x ao final do ArrayList.                                          |
| clear( )    | Remove todos os elementos do ArrayList.                                               |
| contains(x) | Retorna true se o ArrayList contém o elemento x especificado e false, caso contrário. |
| get(i)      | Retorna o elemento no índice i especificado.                                          |
| remove(i)   | Remove o elemento no índice i especificado.                                           |
| size( )     | Retorna o número de elementos armazenados em ArrayList.                               |
: {.bordered}
:::

## Exemplo 1 com a Classe ArrayList
```{.java code-line-numbers="false"}
import java.util.ArrayList; //<1>

public class App{
  public static void main(String[] args){
  
    ArrayList<String> nomes = new ArrayList<String>();
    nomes.add("Luiz Henrique"); //<2>
    nomes.add("Marco Aurélio");
    nomes.add("Paulo Roberto");
    
    System.out.println(nomes.get(1)); //Saída: Marco Aurélio //<3>
    System.out.println(nomes.contains("Paulo Roberto")); //Saída: true //<4>
  }
}  
```

1. [Precisamos importar a classe do pacote `java.util`.]{.fontsize70}
2. [Adicionando elementos no final do ArrayList.]{.fontsize70}
3. [Utilizando o método `get` para retornar o elemento da posição 1.]{.fontsize70}
4. [Utilizando o método `contains` para verificar se o elemento "Paulo Roberto" está no ArrayList.]{.fontsize70}

## Percorrendo um ArrayList
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/professor31_metade.png){fig-alt="Professor_metade" fig-align="center" width=55%}
:::
::: {.column width="70%"}
[Podemos percorrer um ArrayList da mesma maneira que utilizamos para percorrer um vetor (*array*), ou seja, usando uma estrutura de repetição `for`.]{.fontsize80}
```{.java code-line-numbers="false"}
ArrayList<String> nomes = new ArrayList<String>();
for(int i = 0; i < nomes.size(); i++){
  System.out.println(nomes.get(i));
}  
```
:::
::::

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="70%"}
[No entanto, podemos fazer a mesma coisa usando uma "nova" estrutura de repetição denominada **for-each** (para cada)]{.fontsize80}
```{.java code-line-numbers="false"}
ArrayList<String> nomes = new ArrayList<String>();
for(String item: nomes){//<1>
  System.out.println(item);
}  
```
1. [Em cada iteração, essa variável `item` referencia um elemento do `ArrayList`.]{.fontsize60}
:::
::: {.column width="30%"}
![](figuras/professor2_metade.png){fig-alt="Professor2_metade" fig-align="center" width=50%}
:::
::::
- [Vale observar que com o **for-each** não precisamos usar o índice para acessar cada posição do `ArrayList`.]{.fontsize65}

## Exemplo 2 com a Classe ArrayList
```{.java code-line-numbers="false"}
import java.util.ArrayList;

public class App{
  public static void main(String[] args){
  
    ArrayList<String> nomes = new ArrayList<String>();
    nomes.add("Luiz Henrique");
    nomes.add("Marco Aurélio");
    nomes.add("Paulo Roberto");
    
    //Utilizando o for-each para percorrer o ArrayList
    for(String e: nomes){ 
      System.out.println(e);
    }
  }
}  
```

## ArrayList de Tipos Primitivos
:::{.fontsize80}
[Vamos supor que eu queira usar um `ArrayList` para armazenar uma coleção de número inteiros.]{style="color:darkblue"}
:::

. . .

::::{.columns style='display: flex !important; align-items: top;' }
::: {.column width="70%" .fontsize80 .nonincremental}
- Para isso, coloco no meu programa a seguinte declaração: 
:::
::: {.column width="30%"}
```{.java code-line-numbers="false"}
ArrayList<int> num;
```
:::
::::

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/jovem.png){fig-alt="Jovem" fig-align="center" width=48%}
:::
::: {.column width="80%" .fontsize80}
[Isso vai funcionar?]{style="color:darkblue;"}

- Não!<br>
![](figuras/terminal_erro_arraylist.png){fig-alt="Jovem" fig-align="center" width=70%}
- A classe `ArrayList` aceita **somente** **tipos** por **referência** (objetos) como elementos.
- O `int` em Java é um **tipo primitivo**.
:::
::::
 
- [Como fazer então?]{.fontsize80 style="color:darkblue;"}

## ArrayList de Tipos Primitivos
[Como resolver o problema?]{style="color:darkblue;" .fontsize90}

- [O Java possui um mecanismo conhecido como *boxing*, que permite que valores primitivos sejam empacotados como objetos para uso com classes genéricas.]{.fontsize90}

:::{.fragment .nonincremental}
- [Desse modo, para armazenar inteiros em um ArrayList usamos a classe Integer.]{.fontsize90}
```{.java code-line-numbers="false"}
ArrayList<Integer> num = new ArrayListInteger>();
```  
:::

:::{.fontsize90}
- E o compilador nos ajuda com o autoboxing, ou seja:
  - Sempre que necessário, o tipo int é empacotado como um objeto Integer ou um valor int dentro de um objeto Integer é desempacotado. 
- Desse modo, declaramos um ArrayList de Integer mas podemos lidar com os dados normalmente como se fossem do tipo int.
:::


## ArrayList de Tipos Primitivos - Exemplo
```{.java code-line-numbers="false"}
import java.util.ArrayList;

public class App{

  public static void main(String[] args){
  
    ArrayList<Integer> num = new ArrayList<Integer>();
    int x = 20;
    
    num.add(3);
    num.add(-5);
    num.add(x);
    
    for(int e: num){
      System.out.print(e + " ");
    }
    System.out.println();
  }
}
```
![](figuras/terminal_arraylist_integer.png){fig-alt="Terminal_arraylist_integer" fig-align="center" width=60%}


## ArrayList de Tipos Primitivos
[Cada tipo primitivo tem uma classe equivalente em Java:]{style="color:darkblue;"}

:::{.nonincremental}
- int $\rightarrow$ Integer
- float $\rightarrow$ Float
- double $\rightarrow$ Double
- char $\rightarrow$ Character
- boolean $\rightarrow$ Boolean
:::


## ArrayList: Busca Usando uma "Chave"
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="50%" .fontsize80}
Já vimos que podemos usar o índice para obtermos o elemento contido numa dada posição do ArrayList.
:::
::: {.column width="60%"}
```{.java code-line-numbers="false"}
ArrayList<Integer> notas = new ArrayList<Integer>();
int x = notas.get(2);
System.out.printf("A nota do aluno é %d", x);

```
:::
::::



## ArrayList: Remoção de um Elemento



## ArrayList: Remoção de um Elemento


## Encapsulamento de Coleções