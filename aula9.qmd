---
title: Coleções$:$ Listas<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Conteúdo desta Aula  

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}
::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center"}
:::

::: {.column width="70%"}
::: {.nonincremental}
::: {style="font-size: 120%;"}
- Coleções:
    - *ArrayList*
:::
:::
:::
::::


## Estruturas de Dados
[O que são estruturas de dados?]{style="color:darkblue;" .fontsize90}

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
xxx
:::
::: {.column width="70%" .fontsize90}
Uma estrutura de dados é uma forma particular de armazenar e organizar os dados que serão utilizados por um programa de modo que eles possam ser manipulados de maneira eficiente.
:::
::::

[O que estudaremos?]{style="color:darkblue;" .fontsize90 .fragment}

:::{.fontsize90 .fragment}
Nesta disciplina veremos como utilizar em nossos programas uma importante estrutura de dados (chamada em Java de coleção).

- Listas.
:::

## Coleções
:::{.fontsize90}
- O pacote `java.util` fornece classes que implementam as coleções. 
- Mas o que é uma coleção?
  - Podemos dizer que é um conjunto de objetos de mesma natureza.
  - Exemplos: coleção de músicas, coleção de carros, coleção de moedas etc.
 
- Em Java, uma coleção é representada por uma classe. Portanto, as operações sobre coleções são realizadas a partir dos métodos implementados nessas classes.
- Quais operações podemos fazer em uma coleção?
  - Adicionar um novo objeto na coleção.
  - Remover um objeto da coleção.
  - Buscar os objetos na coleção.
:::

## Relembrando...
:::{.fontsize90}
Antes de conhecer a classe que implementa a estrutura de dados, vamos recordar de algo que já utilizamos...

- O que já usamos para armazenar conjuntos de dados de mesmo tipo em nossos programas?
  - Já utilizamos os vetores (arrays)!
:::


## Relembrando...
:::{.fontsize70}
Então vamos relembrar algumas coisas importantes sobre vetores:

- Em Java, os vetores são considerados objetos.
- Um vetor pode conter elementos de tipos primitivos (int, float, double etc.) ou de tipos por referência (para objetos).
- Exemplo de declaração de um vetor:
:::

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="10%"}
:::
::: {.column width="90%"}
```{.java code-line-numbers="false"}
int[] c = new int[10];
``` 
:::
::::

:::{.fontsize70}
- Exemplo de modificação dos valores de um vetor de inteiros:
:::

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="10%"}
:::
::: {.column width="90%"}
```{.java code-line-numbers="false"}
for(int i = 0; i < c.length; i++){
  c[i] = i;
}
``` 
:::
::::

:::{.fontsize70}
- Exemplo de vetor passado por parâmetro para método:
:::

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="10%"}
:::
::: {.column width="90%"}
```{.java code-line-numbers="false"}
public void definirVetor(int[] c){
  for(int i = 0; i < c.length; i++){
    c[i] = i;
  }
}
//Obs.: O vetor passado por parâmetro será alterado.
``` 
:::
::::


## Desvantagem dos Vetores
[Apesar da sua utilidade, os vetores têm uma limitação: são estruturas de dados estáticas!]{.fontsize80}

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="20%"}
xxx
:::
::: {.column width="80%" .fontsize80}
E o que isso significa?

- Significa que o seu tamanho, definido no momento de sua declaração, é fixo.
:::
::::

. . .

[Nesse caso, como eu faço se não souber quantos elementos eu terei que armazenar em um determinado vetor?]{.fontsize80 style="color:darkblue;"}

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="80%" .fontsize80}
- Nesse caso a única opção é "estimar" o tamanho necessário do vetor, podendo resultar em duas situações:
  - Desperdiço de memória se você estimar um tamanho maior do que é realmente necessário.
  - Não conseguir armazenar todos os elementos se você estimar um tamanho menor do que realmente é necessário
:::
::: {.column width="20%"}
yyy
:::
::::


## Classe ArrayList
:::{.fontsize80}
A classe `ArrayList` implementa uma lista!

- Nessa lista, a ordem dos seus elementos é a mesma da inserção e o acesso aos mesmos pode ser feito pela sua posição.
- A classe de coleção ArrayList$<$T$>$ fornece uma solução conveniente quando necessita-se de uma estrutura que possa alterar dinamicamente seu tamanho para acomodar mais elementos.
  - O T$^1$ corresponde ao tipo dos elementos que você deseja armazenar no ArrayList.  
:::   

::::{.columns style='display: flex !important; align-items: top;' .fragment }
::: {.column width="20%" .fontsize80 .nonincremental}
- Exemplo:
:::
::: {.column width="80%"}
```{.java code-line-numbers="false"}
ArrayList<String> nomes;
``` 
[Nesse caso estamos declarando a variável nomes, do tipo ArrayList de strings, ou seja, para armazenar elementos do tipo String.]{.fontsize80}
:::
::::   

:::{.fontsize70 .fragment}
__________<br>
1. Classes que dependem de um segundo tipo são chamadas de classes genéricas.
:::



## Classe ArrayList



## Exemplo 1 com a Classe ArrayList


## Percorrendo um ArrayList



## Exemplo 2 com a Classe ArrayList



## ArrayList de Tipos Primitivos
Vamos supor que eu queira usar um ArrayList para armazenar uma coleção de número inteiros.

  Para isso, coloco no meu programa a seguinte declaração: 
 2cmArrayListint> num;  
  Isso vai funcionar?
 
  2Não!
  center
  51<2->
  center
  3A classe ArrayList aceita somente tipos por referência (objetos) como elementos.
   O int em Java é um tipo primitivo.
 
 4Como fazer então?

## ArrayList de Tipos Primitivos
Como resolver o problema?

 2O Java possui um mecanismo conhecido como boxing, que permite que valores primitivos sejam empacotados como objetos para uso com classes genéricas.
 3Desse modo, para armazenar inteiros em um ArrayList usamos a classe Integer. 
 ArrayListInteger> num = new ArrayListInteger>();  
 4E o compilador nos ajuda com o autoboxing, ou seja:
 
   Sempre que necessário, o tipo int é empacotado como um objeto Integer ou um valor int dentro de um objeto Integer é desempacotado. 
 
 5Desse modo, declaramos um ArrayList de Integer mas podemos lidar com os dados normalmente como se fossem do tipo int.


## ArrayList de Tipos Primitivos - Exemplo



## ArrayList de Tipos Primitivos
Cada tipo primitivo tem uma classe equivalente em Java:


  int $\longrightarrow$ Integer
  float $\longrightarrow$ Float
  double $\longrightarrow$ Double
  char $\longrightarrow$ Character
  boolean $\longrightarrow$ Boolean


## ArrayList: Busca Usando uma "Chave"


## ArrayList: Remoção de um Elemento



## ArrayList: Remoção de um Elemento


## Encapsulamento de Coleções