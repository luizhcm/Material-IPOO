---
title: Relacionamento entre Objetos<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Conteúdo desta Aula  

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}
::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center"}
:::

::: {.column width="70%"}
::: {.nonincremental}
::: {style="font-size: 120%;"}
Tipos de Relacionamento entre Objetos:

- Composição
- Agregação
- Associação
:::
:::
:::
::::

## Relacionamento entre Objetos
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="60%" .fontsize90}
Na programação orientada a objetos, os objetos se relacionam, ou seja, enviam mensagens uns para os outros.

- Esse envio de mensagens se dá quando um objeto faz chamadas a métodos públicos de outros objetos.
:::
::: {.column width="40%"}
![](figuras/envio_mensagem.png){fig-alt="Envio_mensagem" fig-align="center" width=90%}
:::
::::

::::{.columns style='display: flex !important; align-items: top;'.fragment}
::: {.column width="30%"}
![](figuras/aluno_estudando.png){fig-alt="Aluno_estudando" fig-align="center" width=70%}
:::
::: {.column width="70%" .fontsize90}
Sistemas OO dependem de como os objetos se relacionam. Portanto, o planejamento (modelagem) das classes se baseia nesses relacionamentos.
:::
::::


## Pensando nos Relacionamentos...
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="40%"}
![](figuras/software_pizzaria.png){fig-alt="Software_pizzaria" fig-align="center" width=90%}
:::
::: {.column width="70%" .nonincremental}
[Quais objetos podem existir em um software de uma pizzaria?]{style="color:darkblue;"}

:::{.fontsize90}
- Como você acha que esses objetos se relacionam? 
- O que cada um tem a ver com o outro? 
- Quem envia mensagem para quem?
:::
:::
::::

. . .

[Podemos pensar que existem, por exemplo, os objetos:]{style="color:darkblue;"}

:::{.fontsize90}
- Pizza, Bebida, Vendedor, Cliente etc.
- Um pedido pode ser formado por um conjunto de itens (pizza e bebida) e estar vinculado a um cliente e um vendedor.
:::


## Pensando nos Relacionamentos...
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="40%"}
![](figuras/sig_ufla.png){fig-alt="Sig_ufla" fig-align="center" width=80%}
:::
::: {.column width="70%" .nonincremental}
[Quais objetos podem existir em um software como o SIG-UFLA?]{style="color:darkblue;"}

:::{.fontsize90}
Pense novamente como os objetos se relacionam. 

- O que cada um tem a ver com o outro?
:::
:::
::::

. . .

[Podemos pensar que existem, por exemplo, os objetos:]{style="color:darkblue;"}

:::{.fontsize90}
- Aluno, Turma, Professor, Disciplina etc.
- Uma turma pode ser formada por um conjunto de alunos e estar vinculada a uma disciplina.
:::


## Pensando nos Relacionamentos...
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="40%"}
![](figuras/interior_banco.png){fig-alt="Interior_banco" fig-align="center" width=100%}
:::
::: {.column width="70%" .nonincremental}
[Por fim, quais objetos podem existir em um software de um banco?]{style="color:darkblue;"}

:::{.fontsize90}
E nesse caso, como os objetos se relacionam? 

- O que cada um tem a ver com o outro?

:::
:::
::::

. . .

[Podemos pensar que existem, por exemplo, os objetos:]{style="color:darkblue;"}

:::{.fontsize90}
- Agência, Cliente, Funcionário, Contas etc.
- Um banco pode ter diversas agências.
- Um cliente pode ter várias contas (corrente, poupança...) e estar vinculado a uma agência.
:::


## Relacionamento entre Objetos
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="60%" .fontsize90}
Com os exemplos anteriores, podemos perceber que os softwares orientados a objetos dependem em grande parte de como os objetos se relacionam.

:::{.fragment}
Portanto, temos que entender agora os tipos de relacionamento que podem existir entre objetos:
    
- Composição.
- Agregação.
- Associação.
:::
:::
::: {.column width="40%"}
![](figuras/relacionamento_objetos.png){fig-alt="Relacionamento_objetos" fig-align="center" width=90%}
:::
::::
    

## Relacionamento: Banco x Agências
![](figuras/banco_agencias.png){fig-alt="Banca_agencias" fig-align="center" width=100%}


## Relacionamento: Pedido x Itens
![](figuras/pedido_itens.png){fig-alt="Pedido_itens" fig-align="center" width=100%}


## Relacionamento: Livro x Capítulos
![](figuras/livro_capitulos.png){fig-alt="Livro_capitulos" fig-align="center" width=100%}


## Composição
![](figuras/exemplo_composicao.png){fig-alt="Exemplo_composicao" fig-align="center" width=90%}

[O que esses três exemplos têm em comum?]{style="color:darkblue;"}

:::{.fontsize90} 
- O fato de que um objeto tem (um ou mais) objetos de outra classe.

[Esse tipo de relacionamento é denominado composição.]{.fragment}
:::


## Composição
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/corpo_humano.png){fig-alt="Corpo_humano" fig-align="center" width=90%}
:::
::: {.column width="70%" .fontsize90}
[A composição se caracteriza por ser um relacionamento: Todo/Parte.]{style="color:darkblue;"}

- Ou seja, há uma classe representando o todo e classes ``satélites'' funcionando como partes.
:::
::::

[Além disso, há outra característica importante:]{style="color:darkblue;" .fragment .fontsize90}

:::{.fontsize90}
- Nos exemplos vistos:
  - Se eu não tenho um banco, não preciso das agências.
  - Se não há um pedido, não faz sentido pensar em itens de pedido.
  - Se eu destruir um livro, não faz sentido os capítulos existirem. 
  
- Resumindo: o objeto contido não faz sentido sem o objeto que o contém.
- Ou seja, o todo controla o tempo de vida das partes.
:::


## Composição - Exemplo de Código
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center" width=60%}

:::
::: {.column width="70%".nonincremental .fontsize90}
[Suponha que precisamos implementar em Java um sistema que tenha as classes Carro, Motor e Porta.]{style="color:darkblue;"}
 
- Podemos dizer que um carro tem um motor.
- Um carro tem 4 portas.

[Como isso pode ser implementado?]{style="color:darkblue;"}
:::
::::



## Composição - Exemplo de Código
:::{.fontsize95}
```{.java code-line-numbers="false"}
public class Carro{
  private Motor motor;//<1>
  private Porta[] portas;
  public Carro(){
    motor = new Motor();//<2>
    portas = new Porta[4];
    for(int i = 0; i < 4; i++){
      portas[i] = new Porta();
    }
  }
  public Motor getMotor(){//<3>
    return motor.clone();
  }
  public Porta[] getPortas(){//<4>
    return portas.clone();
  }
}
```

1. [Como o motor e as portas são partes do carro, eles devem ser atributos do mesmo.]{.fontsize70}
2. [O carro controla o tempo de vida do motor e das portas e, portanto, é ele que cria esses objetos.]{.fontsize70}
3. [A classe não deve ter um método `get` que retorne a referência do objeto (quebra o encapsulamento).]{.fontsize70}
4. [Como ninguém tem referência para os objetos porta e motor, esses objetos só podem ser destruídos junto com o carro. Portanto, o tempo de vida está completamente controlado.]{.fontsize70}
:::



## Resumindo...
![](figuras/resumo_composicao.png){fig-alt="Resumo_composicao" fig-align="center" width=90%}


## Relacionamento: Grupo de Estudo x Alunos
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/grupo_estudantes.png){fig-alt="Grupo_estudantes" fig-align="center" width=70%}
:::
::: {.column width="60%" .fontsize90}
[Qual é o relacionamento entre um grupo de estudo e os alunos?]{style="color:darkblue;"}

- Um grupo de alunos tem vários alunos. Desse modo, um aluno é parte de um grupo de estudo.

[Então isso é uma composição, certo?]{style="color:darkblue;" .fragment}
:::
::::

. . .

::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="60%" .fontsize90}
Quando um grupo de estudos acaba, os alunos deixam de existir?
:::
::: {.column width="40%"}
![](figuras/briga_grupo.png){fig-alt="Briga_grupo" fig-align="center" width=60%}
:::
::::


## Agregação
Essa também é uma relação todo/parte, porém, nesse caso dizemos que a parte não é exclusiva do todo.
 
  2Ou seja, não é o grupo de estudo que controla o tempo de vida dos alunos.
  3Dizendo de outro modo, não é o todo que controla o tempo de vida das partes.
 


 
Repare:
 
  Os alunos continuam existindo ainda que o grupo de estudo termine! Ufa...ainda bem.
 
 Esse tipo de relacionamento é denominado agregação.


## Agregação -  Exemplo de Código


## Resumindo...



## Relacionamento: Carro x Pessoa



## Associação
A pessoa utiliza o carro e o carro transporta a pessoa.
 
  Não faz sentido dizer que pessoa é parte do carro ou que carro é formado por pessoas, concorda?
  Ou seja, não é um relacionamento todo/parte.
 


 

Em outras palavras, temos duas classes distintas onde uma faz uso da outra. 
Esse tipo de relacionamento é denominado associação.


## Associação - Exemplo de Código



## Resumindo...



## A Relatividade




## Exemplo da Relatividade



