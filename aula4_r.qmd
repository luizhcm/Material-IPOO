---
title: Objetos na Memória e Sobrecarga<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Conteúdo desta Aula  

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}

::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center"}
:::

::: {.column width="70%"}
::: {.nonincremental}
::: {style="font-size: 120%;"}
- Criação de Objetos
- Sobrecarga
:::
:::
:::

::::


## Criação de Objetos

- Para criar um objeto devemos usar a palavra-chave **new**.
- Vamos supor que temos uma classe `ContaBancaria` e desejamos criar um objeto a partir dessa classe. Como fazer?
```{.java code-line-numbers="false"}
ContaBancaria minhaConta;
minhaConta = new ContaBancaria();
```
- O que estamos fazendo na primeira linha? Criando um objeto?
    - Não!
    - E também não estamos declarando um objeto, mas sim uma variável que poderá referenciar um objeto.
- E na segunda linha, estamos criando um objeto?
    - Sim, pois quando utilizamos o comando **new**, o construtor da classe é chamado.
    - A atribuição (sinal =) faz com que a variável `minhaConta` referencie o objeto criado.


## Criação de Objetos na Memória

![](figuras/investigar_objeto_memoria.png){fig-alt="Objeto_memoria" fig-align="center"}


## Criação de Objetos na Memória

::::{.columns style='display: flex !important; height: 70%; align-items: top;'}

::: {.column width="54%"}
```{.java code-line-numbers="false"}
public class ContaBancaria{
    private int numero;//Número da conta
    private String nome;//Nome do titular da conta
    private float saldo;//Saldo da conta

    public String getNumero(){
        return numero;
    }
    public String getNome(){
        return nome;
    }
    // Outros métodos omitidos
}
```
:::

::: {.column width="46%"}
```{.java code-line-numbers="false"}
public class App{
    public static void main(String[] args){
        ContaBancaria minhaConta;
        minhaConta = new ContaBancaria();
    }
}
```
![](figuras/modelo_memoria1.png){fig-alt="Modelo_memoria1" fig-align="center" width=100%}

![](figuras/modelo_memoria2.png){fig-alt="Modelo_memoria2" fig-align="center" width=100%}

![](figuras/modelo_memoria3.png){fig-alt="Modelo_memoria3" fig-align="center" width=100%}

![](figuras/modelo_memoria4.png){fig-alt="Modelo_memoria4" fig-align="center" width=100%}

:::

::::


## Variáveis e Objetos

No exemplo anterior existe uma variável que guarda um endereço.

. . .

Então essa variável não seria um ponteiro?

- Certamente! Tecnicamente as variáveis de objetos em Java são ponteiros.

. . .

Mas já ouvimos dizer que pelo fato de Java não ter ponteiros, ela é mais segura que C++. E agora?

- Apesar de a variável ser um ponteiro, Java não permite que você faça as operações de ponteiro com a variável.
- Isso ajuda a eliminar os principais riscos de uso de ponteiros.


## Construtor

Já aprendemos que quando o comando **new** é utilizado, além de se criar o objeto, o construtor do objeto é chamado.

. . .

Mas o que acontece se criarmos uma classe sem um construtor? Será possível criar objetos dessa classe?

- Sim, é possível criar objetos dessa classe.
- Isso porque Java cria (internamente) um construtor padrão (sem parâmetros).
- O construtor padrão inicializa os atributos dos objetos:
    - Com valores padrões para tipos primitivos (int, float $\ldots$).
    - Com *null* para tipos por referência (variáveis de objetos).


## Construtor

::::{.columns style='display: flex !important; height: 60%; align-items: top;'}

::: {.column width="46%" .nonincremental .fontsize80}
Se utilizássemos o construtor padrão da classe `ContaBancaria`, um objeto dessa classe teria seus atributos incializados com valores padrão do Java:

- `numero` = 0
- `nome` = *null*
- `saldo` = 0.0f
:::

::: {.column width="54%"}
::: {.nonincremental}
```{.java code-line-numbers="false"}
public class ContaBancaria{
    private int numero;//Número da conta
    private String nome;//Nome do titular da conta
    private float saldo;//Saldo da conta

    //Classe sem construtor

    public String getNumero(){
        return numero;
    }

    public String getNome(){
        return nome;
    }
    // Outros métodos omitidos
}
```
:::
:::

::::

::: {.fontsize80 .fragment}

Mas uma conta bancária sem um titular é uma conta válida?

- Certamente não! Sem um número, um titular e um saldo não temos uma conta válida.
:::

::: {.fontsize80 .fragment}
Portanto, o construtor precisa garantir que o estado inicial dos objetos da classe seja um estado válido.
:::


## Construtor Padrão

::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="30%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=50%}
:::

::: {.column width="70%"}
Se a classe tiver **apenas** um construtor com parâmetros, posso usar o construtor padrão do Java?

- Não, exceto se você tiver implementado um construtor igual ao construtor padrão do Java.

::: {.fragment}
Por que?

- Porque se Java permitisse isso, seria impossível que o programador garantisse que os objetos tenham sempre um estado inicial válido.
:::
:::

::::


## Classe `ContaBancaria` Completa

```{.java code-line-numbers="false"}
public class ContaBancaria{
    private int numero;//Número da conta
    private String nome;//Nome do titular da conta
    private float saldo;//Saldo da conta
    //Construtor
    public ContaBancaria(int numero, String nome){
        this.numero = numero;
        this.nome = nome;
        saldo = 0.0f;
    }

    public String getNumero(){
        return numero;
    }

    public String getNome(){
        return nome;
    }

    public float getSaldo(){
        return saldo;
    }
    
    public void depositar(float valor){
        saldo += valor;
    }

    public void sacar(float valor){
        saldo -= valor;
    }
}
```


## Sobrecarga de Métodos

::::{.columns style='display: flex !important; align-items: top;' .fontsize90}

::: {.column width="30%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=35%}
:::

::: {.column width="70%"}
**Métodos** com o **mesmo nome** podem ser **declarados** na **mesma classe**?

- Sim, desde que tenham [diferentes conjuntos de parâmetros]{.alert}.
- Os conjuntos de parâmetros são determinados pelo [número]{.alert}, [tipos]{.alert} e [ordem]{.alert} dos parâmetros.
:::

::::

::::{.columns style='display: flex !important; align-items: center;' .fragment .fontsize90}

::: {.column width="70%"}
Isso é o que chamamos de **sobrecarga de métodos**!

- Quando um método sobregarregado é chamado, o compilador Java seleciona o método adequado examinando o [número]{.alert}, os [tipos]{.alert} e a [ordem]{.alert} dos argumentos na chamada.
:::

::: {.column width="30%"}
![](figuras/professor2_metade.png){fig-alt="Pensando" fig-align="center" width=40%}
:::
::::


## Sobrecarga de Métodos

::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="30%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=40%}
:::

::: {.column width="70%"}
**Para que serve a sobrecarga de métodos?**

- Ela é comumente utilizada para criar vários métodos com o **mesmo nome** que realizam as **mesmas tarefas** (ou tarefas **semelhantes**), mas sobre **conjuntos de parâmetros diferentes**.
:::

::::

:::{.callout-important title="Observação" icon=false .fragment}
Vale ressaltar que além dos métodos, os construtores também podem ser sobrecarregados.
:::


## Sobrecarga de Métodos

Posso criar dois métodos sobrecarregados com a mesma quantidade de parâmetros, dos mesmos tipos, mas com \underline{nomes diferentes}?
 
-  Exemplo: 
```{.java code-line-numbers="false" .fragment}
public void depositar(float aluguel);
public void depositar(float salario);
```
- O que pode ou não ser feito em termos de sobrecarga tem a ver com o que o compilador consegue identificar.
- No exemplo anterior, imagine a chamada:
```{.java code-line-numbers="false" .fragment}
minhaConta.depositar(2000.00);
```
- Como o compilador definiria qual dos métodos está sendo chamado?
- O compilador não consegue! Portanto, não podemos criar métodos sobrecarregados desse modo.


## Sobrecarga de Métodos

E agora? Posso criar dois métodos sobrecarregados como os declarados a seguir?
 
-  Exemplo: \textbf{void} \textit{metodo1}(\textbf{int} \textit{a}, \textbf{float} \textit{b});\\
\hspace{1.6cm} \textbf{void} \textit{metodo1}(\textbf{float} \textit{a}, \textbf{int} \textit{b});
-  \uncover<2->{Sim, pois a ordem dos tipos de parâmetros é distinta!}


## Sobrecarga de Métodos

Eu posso criar dois métodos sobrecarregados com os mesmos parâmetros, mas com \underline{tipos de retorno} diferentes?
 
-  Exemplo: \textbf{int} \textit{resgatar}(\textbf{String} \textit{aplicacao});\\
\hspace{1.6cm} \textbf{float} \textit{resgatar}(\textbf{String} \textit{aplicacao});
-  \uncover<2->{Novamente, vamos pensar em um exemplo de chamada.\\
\hspace{1cm} \textbf{int} \textit{a} = \textit{minhaConta}.\textit{resgatar}(``poupanca'');}
-  \uncover<3->{Hummm... nesse caso parece que sim, pois o compilador sabe que a variável \textit{a} é do tipo \textbf{int}.}
-  \uncover<4->{Mas e se eu não usar o valor retornado por uma chamada de método?

-  Por exemplo, eu poderia chamar o método da seguinte forma: \textit{minhaConta}.\textit{resgatar}(``poupanca'');}
-  \uncover<5->{Nesse caso, o compilador não consegue definir qual método deverá ser chamado.}
\end{itemize}
-  \uncover<6->{Portanto, também não é possível declarar métodos sobrecarregados desse modo.}