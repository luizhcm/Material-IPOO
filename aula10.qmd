---
title: Design de Classes:<br>Coesão e Acoplamento<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Conteúdo desta Aula  

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}
::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center"}
:::

::: {.column width="70%"}
::: {.nonincremental}
::: {style="font-size: 120%;"}
- Design de Classes:
    - Acoplamento
    - Coesão
- Duplicação de Código
- Design Baseado na Responsabilidade
- Acoplamento Implícito
- Refatoração
:::
:::
:::
::::

## Design de Classes
[O que torna o design de uma classe bom ou ruim?]{style="color:darkblue;"}

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="70%" .fontsize90}
É possível implementar uma aplicação que funcione, mas onde as classes estão mal projetadas.

- O fato de uma aplicação executar corretamente não significa que ela esteja internamente bem estruturada.
:::
::: {.column width="30%"}
![](figuras/projeto_ruim.png){fig-alt="Projeto_ruim" fig-align="center" width=100%}
:::
::::

:::{.fragment .fontsize90}   
Nesta aula, veremos alguns princípios de que devem ser seguidos para termos um bom design de classes.
:::

## Design de Classes
[Quais os problemas de um design ruim?]{style="color:darkblue;"}

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="40%"}
![](figuras/manutencao.png){fig-alt="Manutenção" fig-align="center" width=85%}
:::
::: {.column width="70%" .fontsize80}
- Geralmente os problemas surgem durante a manutenção.
    - Quando se deseja fazer alterações em uma aplicação existente.
- Mas os problemas podem aparecer ainda durante a implementação.
    - Uma implementação com estrutura inicial ruim pode tornar o desenvolvimento mais complexo, dificultando ou impossibilitando a sua conclusão.
:::
::::

:::{.fragment .fontsize80}   
Lembre-se que frequentemente uma empresa mantém, estende e vende uma aplicação por vários anos.
 
- Portanto, se ele for mal projetado, os custos de manutenção ao longo desses vários anos podem ser muito maiores do que o necessário.
:::


## Design de Classes
[Usaremos um jogo chamado World of Zuul para ilustrar os conceitos que discutiremos a seguir.]{.fontsize75 style="color:darkblue;"}

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%" .fontsize75}
Ele é um jogo de exploração de ambientes e aventura, mas sem interface gráfica. Basicamente deve-se ler a descrição de um abiente e escrever textos que representam comandos a serem realizados no jogo.
:::
::: {.column width="70%"}
![](figuras/world_zuul1.png){fig-alt="Tela_jogo" fig-align="center" width=85%}
:::
::::

:::{.fontsize75}
Esse jogo, no estilo Adventure, foi inspirado em um jogo criado na década de 70 que fez muito sucesso: Colossal Cave Adventure.
:::

## Design de Classes
[O Jogo World-of-Zuul]{.fontsize90 style="color:darkblue;"}

:::{.fontsize90} 
- Em seu formato original, o jogo ainda não está muito interessante.
    - Ele está incompleto!
- Desse modo, veremos como estender a sua implementação, discutindo os apectos do design de classes existente.
- Perceberemos que essa versão original tem exemplos de decisões de design ruins.
    - Veremos como isso influencia nossas tarefas e como corrigi-las.
- O problema de um design ruim normalmente não está relacionado com a complexidade do problema que se deseja solucionar.
    - O design ruim está mais relacionado com as decisões que tomamos durante a solução do problema.
:::

## Entendendo a Modelagem do Jogo
![](figuras/modelagem_inicial_jogo.png){fig-alt="Modelagem_inicial_jogo" fig-align="center" width=85%}



## Design de Classes
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/jovem.png){fig-alt="Jovem" fig-align="center" width=50%}
:::
::: {.column width="70%"}
[Como avaliar se um design de classe é bom ou ruim?]{style="color:darkblue;"}

- Dois parâmetros são fundamentais para isso:
    - Acoplamento.
    - Coesão.
:::
::::



## Acoplamento
[O que é acoplamento (coupling)?]{style="color:darkblue;"}

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="80%" .fontsize90}
- Refere-se à interconectabilidade das classes.
- Lembre-se que as classes se relacionam quando seus objetos se comunicam.
- Quanto mais as classes se relacionam umas com as outras, mais forte é o acoplamento.
:::
::: {.column width="25%"}
![](figuras/acoplamento.png){fig-alt="Acoplamento" fig-align="center" width=30%}
:::
::::

[O que desejamos em termos de acoplamento?]{style="color:darkblue;" .fragment}

:::{.fontsize90}
- Trabalhamos para enfraquecer o acoplamento em um sistema.
  - Ou seja, cada classe deve ser o mais independente possível e se comunicar com outras por meio de uma interface pequena e bem definida.
::: 
  

## Acoplamento
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="30%"}
![](figuras/pensando2.png){fig-alt="Acoplamento" fig-align="center" width=80%}
:::
::: {.column width="70%" .fontsize90}
[Por que devemos buscar o acoplamento fraco?]{style="color:darkblue;"}

- Em uma estrutura de classe fortemente acoplada, uma alteração em uma classe pode obrigar a alteração em várias outras classes.
  - Ou seja, uma pequena alteração em uma classe pode se propagar pela aplicação toda.
:::
::::

[Resumindo, quanto mais acopladas forem as classes, mais difícil se torna realizar alterações em um sistema.]{style="color:darkblue;" .fontsize90 .fragment}

## Coesão
[O que é coesão?]{style="color:darkblue;"}

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="80%" .fontsize90}
- Refere-se à quantidade e diversidade de tarefas sob responsabilidade de uma unidade de uma aplicação.
- Uma unidade pode ser: um método, uma classe ou um conjunto de classes (pacote).
:::
::: {.column width="25%"}
![](figuras/multitarefas.png){fig-alt="Acoplamento" fig-align="center" width=90%}
:::
::::

[O que se espera em termos de coesão?]{style="color:darkblue;" .fragment}

:::{.fontsize90}
- Um bom design de classe exibe um grau elevado de coesão.
- Em um sistema com alto grau de coesão:
  - Cada método é responsável por apenas uma tarefa bem definida (deve implementar uma operação lógica).
  - Uma classe deve representar um tipo de entidade. 
::: 


## Coesão
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="30%"}
![](figuras/pensando2.png){fig-alt="Acoplamento" fig-align="center" width=80%}
:::
::: {.column width="70%" .fontsize90}
[Para que buscamos um alto grau de coesão?]{style="color:darkblue;"}

- Para maximizarmos a reutilização de código.
- Se um método é responsável por apenas uma tarefa bem definida, é muito mais provável que ele possa ser reutilizado.
- Se uma classe representa uma única entidade, maior é a chance de ela ser reaproveitada em um contexto diferente.
:::
::::


## Duplicação de Código
:::{.fontsize90}
[Duplicação de código é um indicador de design ruim!]{style="color:darkblue"}

- A duplicação ocorre quando em uma aplicação um mesmo segmento de código aparece mais de uma vez em diferentes pontos do código.
 

[Por que a duplicação deve ser evitada?]{style="color:darkblue" .fragment}
 
- Porque qualquer alteração realizada em um trecho de código duplicado, terá que ser realizada em mais de um ponto do código.
- Se a pessoa responsável pela manutenção não perceber a duplicação e fizer alterações em apenas um ponto do código, o sistema se torna inconsistente (bug).
- Além disso, a duplicação leva ao desperdício de tempo durante a fase de implementação do sistema.
:::

## Duplicação de Código no Jogo
[Veja esses dois métodos da classe `Jogo`: ambos imprimem informações sobre a localização atual.]{.fontsize70}

::::{.columns style='display: flex !important; align-items: top;' .fontsize80}
::: {.column width="59%"}
```{.java code-line-numbers="false" code-line-numbers="|8-22"}
private void irParaAmbiente(Comando comando){
  //Código inicial omitido...
  if (proximoAmbiente == null) {
      System.out.println("Nao ha passagem!");
  } else {
      ambienteAtual = proximoAmbiente;
      System.out.println("Voce esta " + 
      ambienteAtual.getDescricao());
      System.out.print("Saidas: ");
      if(ambienteAtual.saidaNorte != null) {
          System.out.print("norte ");
      }
      if(ambienteAtual.saidaLeste != null) {
          System.out.print("leste ");
      }
      if(ambienteAtual.saidaSul != null) {
          System.out.print("sul ");
      }
      if(ambienteAtual.saidaOeste != null) {
          System.out.print("oeste ");
      }
      System.out.println();
  }
}
```
:::
::: {.column width="56%"}
```{.java code-line-numbers="false" code-line-numbers="|3-17"}
private void imprimirBoasVindas(){
  //Código inicial omitido...
  System.out.println("Voce esta " + ambienteAtual.getDescricao());
  System.out.print("Saidas: ");
  if(ambienteAtual.saidaNorte != null) {
      System.out.print("norte ");
  }
  if(ambienteAtual.saidaLeste != null) {
      System.out.print("leste ");
  }
  if(ambienteAtual.saidaSul != null) {
      System.out.print("sul ");
  }
  if(ambienteAtual.saidaOeste != null) {
      System.out.print("oeste ");
  }
  System.out.println();
}
```

:::{.fontsize70}
[**O problema é a falta de coesão dos métodos!** Os dois métodos fazem duas coisas:]{.fragment}

- *irParaAmbiente*: altera localização e [exibe localização atual]{.underline}.
- *imprimirBoasVindas*: imprime boas vindas e [exibe localização atual]{.underline}.
:::
:::
::::

## Como Corrigir a Duplicação de Código?
::::{.columns style='display: flex !important; align-items: center;' .fontsize90}
::: {.column width="50%" .fontsize80}
Criaremos um método cuja única tarefa será imprimir as informações da localização atual.

- Com isso, os dois métodos anteriores podem fazer chamada a este método quando precisarem imprimir a localização atual.
:::
::: {.column width="65%"}
```{.java code-line-numbers="false"}
private void imprimirLocalizacaoAtual(){
  System.out.println("Voce esta " + ambienteAtual.getDescricao());
  System.out.print("Saidas: ");
  if(ambienteAtual.saidaNorte != null) {
      System.out.print("norte ");
  }
  if(ambienteAtual.saidaLeste != null) {
      System.out.print("leste ");
  }
  if(ambienteAtual.saidaSul != null) {
      System.out.print("sul ");
  }
  if(ambienteAtual.saidaOeste != null) {
      System.out.print("oeste ");
  }
  System.out.println();
}
```
:::
::::

:::{.fontsize75}
[Suponha que precisemos alterar o nosso sistema porque um ambiente passou a ter saídas para cima e para baixo.]{.fragment}

- Na configuração anterior precisaríamos alterar dois pontos do código.
- Agora precisaremos alterar apenas o método `imprimirLocalizacaoAtual`.
:::

## Atributos Públicos
Atributos públicos significam design ruim!
 
   Já vimos que atributos de uma classe devem ser privados.
  2Agora entenderemos o que acarreta a escolha de se utilizar atributos públicos.
 

Por que o uso de atributos públicos resulta num design de classes ruim?
 
  4Porque aumenta o grau de acoplamento entre as classes!
  5De que forma isso acontece?
  
   6Se precisarmos alterar a forma ou estratégia de representação dos dados de uma classe com atributos públicos, essa alteração precisará ser realizada em todos os lugares onde os atributos públicos são utilizados. \alert{Certamente isso não é desejado!

## Atributos Públicos no Jogo


## Como Corrigir os Atributos Públicos?



## Incrementando o Jogo
Agora desejamos acrescentar opções de saídas nos ambientes.

  Gostaríamos de acrescentar as saídas \underline{para cima e \underline{para baixo.
  Inicialmente poderíamos pensar e colocar mais dois atributos na classe Ambiente.


Mas e se no futuro eu decidir adicionar ainda mais opções de saída?<2
 
  3Se estamos definindo um conjunto de dados que pode aumentar, deveríamos trabalhar com atributos compostos (vetores/coleções).
  4Portanto, vamos usar uma coleção denominada HashMap.
  
    Um objeto dessa classe é como um dicionário que possui uma chave e um valor.
   5Esse tipo de estrutura permite buscarmos o valor a partir da chave.


## Incrementando o Jogo




## Incrementando o Jogo
Adicionando as saídas para cima e para baixo.
 
   Para adicionarmos as saídas para cima e para baixo basta acrescentarmos parâmetros ao método ajustarSaidas da classe Ambiente.
 

Pensando no futuro...<2
 
  2Mas e se no futuro eu desejar ter ainda mais saídas?
  2Como podemos deixar nossa classe Ambiente mais genérica?
  
   3Podemos alterar o método ajustarSaidas de modo que se permita ajustar uma saída por vez.
   4Desse modo, o usuário da classe pode definir a direção que ele quiser.
  
 

Um bom design de classes tenta antecipar possíveis necessidades futuras de alterações no código!


## Pensando no Futuro...


## Design Baseado na Responsabilidade
O grau de acoplamento também é influenciado pelo design baseado na responsabilidade.

  Mas o que significa design baseado na responsabilidade?
 
  2É o processo de projetar classes atribuindo responsabilidades bem definidas a cada classe.
  3A ideia é que cada classe deve ser responsável por tratar seus próprios dados.
  4Ou seja, quem deve manipular um dado é a classe que o contém!
 


Quando precisamos adicionar uma nova funcionalidade em uma aplicação, em qual classe devemos adicionar o método que implementa essa nova funcionalidade?<5
 
  6Na classe responsável pelos dados que serão manipulados por esse novo método.

## Design Baseado na Responsabilidade - Jogo
Suponha que queiramos adicionar um porão embaixo do escritório.

  Como podemos adicionar esse novo ambiente no jogo?
 
  2Para isso, precisamos alterar apenas o método criarAmbientes na classe Jogo.
  3Essa inclusão de ambiente ficou simples de ser feita devido às alterações realizadas na classe Ambiente, que tornaram as responsabilidades mais bem divididas.

## Design Baseado na Responsabilidade - Jogo
Suponha que queiramos adicionar itens aos ambientes.
 
   Qual o melhor lugar para acrescentá-los?
  
   2Na classe Ambiente, afinal eles farão parte do ambiente.
  
  3Para isso, precisamos alterar outras classes além da classe Ambiente?
  
   4Sim, a classe Jogo também precisará ser alterada para passar a chamar um método da classe Ambiente que permita a exibição dos itens.
  
   5Como poderíamos evitar a alteração da classe Jogo a cada novidade inserida no ambiente?
   
    6Criando um método na classe Ambiente (p.ex., getDescricaoLonga) que retorna um texto descrevendo tudo que existe no ambiente.
    7Desse modo, futuras inclusões de elementos nos ambientes resultariam em alterações apenas na classe Ambiente.

## Minimizando Alterações
Devemos criar um design de classe que facilite alterações futuras localizando os efeitos de uma alteração.
 
   Ou seja, idealmente apenas uma classe precisa ser alterada para se fazer uma modificação.
 
 2Ocasionalmente, pode acontecer de alterações serem necessárias em mais de uma classe ao se fazer uma modificação no sistema.
 
   Nesses casos, as alterações necessárias em outras classes devem ser óbvias, fáceis de detectar e executar.


## Acoplamento Implícito
Vimos que o uso de atributos públicos pode aumentar o grau de acoplamento entre classes.
 
  2Isso significa que pode ser necessário fazer alterações em mais de uma classe por causa de uma simples modificação no código.
  3Portanto, sabemos que atributos públicos devem ser evitados.
 

Mas há uma forma de acoplamento ainda pior. Você sabe qual?<4
 
  5O acoplamento implícito!%colocar um figura aqui

## Acoplamento Implícito
O que é o acoplamento implícito?
 
  2Ele ocorre quando uma classe depende de informações internas de outra, mas essa dependência não é obvia.
 

Qual a consequência do acoplamento implícito?<3
 
  4No caso dos atributos públicos, se eles forem alterados somente na classe que os define, a aplicação deixará de compilar corretamente e o erro será apontado.
  5No entanto, nos casos de acoplamento implícito, a omissão de uma alteração necessária pode não ser detectada pelo compilador.
  
    Com isso, o código compila corretamente, mas a aplicação deixa de funcionar corretamente, ou seja, ela não faz o que deveria ser feito.

## Acoplamento Implícito no Jogo
Suponha que queiramos adicionar o comando observar ao conjunto de comandos válidos do jogo.
 
   O objetivo desse novo comando é permitir ao usuário visualizar a descrição do ambiente atual, pois podemos não nos lembrar mais das saídas possíveis para aquele ambiente.%colocar uma figura com a tela do jogo mostrando a necessidade desse comando....
   Onde devemos fazer essa alteração?
  
   2Na classe PalavrasComando, adicionando ao vetor de palavras conhecidas o comando observar.
  
   
  
 
 3O que acontecerá ao testarmos essa alteração?
 
  4Quando executamos o jogo e digitamos o comando observar, nada acontece. Por que?

## Acoplamento Implícito no Jogo


## Acoplamento Implícito no Jogo
Após as alterações anteriores, o jogo funcionará corretamente?
 
  2Não! Por que?
  3Para responder essa pergunta pense no que acontecerá se digitarmos o comando ajuda.
 

   
   4Veja que o comando observar não é listado.
   5Isso acontece porque a classe Jogo depende dos dados da classe PalavrasComando.
  
    Mas isso está implícito e não deu erro de compilação!

## Resolvendo o Acoplamento Implícito no Jogo


## Resolvendo o Acoplamento Implícito no Jogo


## Coesão de Classes
Incrementando nosso jogo...
 
   Imagine que agora queremos adicionar itens aos ambientes de nosso jogo.
  
    Cada ambiente pode conter um item.
    Cada item tem uma descrição e um peso.
  
 

Qual a solução?

 3Uma solução simples seria adicionarmos dois atributos à classe Ambiente: descricaoItem e pesoItem.
 4Essa solução funcionaria?
 
  5Sim, mas ela fere o princípio da coesão. Por que?
  6Um item é uma entidade (ele tem os atributos descrição e peso) e, por isso, deveria ter sua própria classe.
 
 7Portanto, a melhor solução é criar uma classe separada para itens e a classe Ambiente passar a ter objetos do tipo Item.

## Refatoração
Apesar de tentarmos projetar aplicações pensando nas possíveis alterações futuras, nem sempre conseguimos prever todas as adaptações futuras.
 2E é aí que entra a refatoração!

O que é refatoração?<3
 
  4É a atividade de reestruturação de classes e métodos existentes para adaptá-los a alterações de funcionalidades e requisitos.
 

Ao longo do tempo...<5
 
  5É muito comum precisarmos adicionar mais código a uma classe ou um método.
  6Fazendo isso, a coesão pode começar a ficar ruim, fazendo sentido dividir a classe/método em outras classes/métodos.
  7Se isto não for feito, mais tarde as alterações podem se tornar mais complicadas.

## Refatoração
Nunca refatore sem escrever testes antes!
 
   A realização de testes é fundamental nesse processo de refatoração.
  2Ao refatorarmos um sistema que já está em uso, estamos realizando alterações potencialmente grandes, o que atesta a importância da realização de novos testes.
  3Se os testes não são feitos, um cliente que reclamava de um problema, pode passar a reclamar de vários outros após a refatoração.

## Refatoração
Recomendações:
 
   O sistema deve ter um conjunto de testes adequado para suas funcionalidades. Se eles não existem, devem ser criados antes das atividades de refatoração.
  2A refatoração deve ser feita primeiro mantendo as funcionalidades que já existiam (sem acrescentar nenhuma funcionalidade nova).
  3O sistema refatorado deve passar pelo conjunto de testes para garantir que não foram criados novos bugs em coisas que já funcionavam.
  4Somente depois disso é que devem ser acrescentadas as novas funcionalidades e, inclusive, os novos testes para elas.